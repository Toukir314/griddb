{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "RNN_170104095.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HiOEKmITXr85",
        "outputId": "c1ae7016-208f-4eba-8523-517470598c1a"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v5GBLxTkYqFo"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import tensorflow as tf\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from keras.preprocessing.text import Tokenizer\n",
        "from keras.preprocessing.sequence import pad_sequences\n",
        "from keras.models import Sequential\n",
        "from keras import layers\n",
        "from keras import backend as K\n",
        "from keras.utils.vis_utils import plot_model\n",
        "\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import recall_score\n",
        "from sklearn.metrics import f1_score\n",
        "from sklearn.metrics import confusion_matrix"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "S4jLUcXrYe52",
        "outputId": "644e31eb-dd1a-404d-c1b6-a27baafa6932"
      },
      "source": [
        "url_train = '/content/drive/MyDrive/softcom/Dataset 3.csv'\n",
        "data = pd.read_csv(url_train, engine='python')\n",
        "data.head()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweets</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>just had a real good moment. i missssssssss hi...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>is reading manga  http://plurk.com/p/mzp1e</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>@comeagainjen http://twitpic.com/2y2lx - http:...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>@lapcat Need to send 'em to my accountant tomo...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ADD ME ON MYSPACE!!!  myspace.com/LookThunder</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                              tweets  sentiment\n",
              "0  just had a real good moment. i missssssssss hi...          0\n",
              "1         is reading manga  http://plurk.com/p/mzp1e          0\n",
              "2  @comeagainjen http://twitpic.com/2y2lx - http:...          0\n",
              "3  @lapcat Need to send 'em to my accountant tomo...          0\n",
              "4      ADD ME ON MYSPACE!!!  myspace.com/LookThunder          0"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "poegRBlnZegK",
        "outputId": "8f0a247c-2389-4e98-c9a6-3bea5d5d408a"
      },
      "source": [
        "shuffled_data = data.sample(frac=1)\n",
        "shuffled_data.head()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweets</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7891</th>\n",
              "      <td>@hadiqazeeshan Yep..he is</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7801</th>\n",
              "      <td>mini buffalo ranch chicken sandwich! *does cor...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>707</th>\n",
              "      <td>@oTotallyUniqueo It's been good thanks  You?</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7087</th>\n",
              "      <td>@macelity looking forward to the class actuall...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7228</th>\n",
              "      <td>I will protect my updates now, so sorry!</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                 tweets  sentiment\n",
              "7891                         @hadiqazeeshan Yep..he is           0\n",
              "7801  mini buffalo ranch chicken sandwich! *does cor...          0\n",
              "707        @oTotallyUniqueo It's been good thanks  You?          0\n",
              "7087  @macelity looking forward to the class actuall...          0\n",
              "7228          I will protect my updates now, so sorry!           0"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "thtCzpSFZtU4"
      },
      "source": [
        "shuffled_data.to_csv('/content/drive/MyDrive/4.2/SoftCom/shuffledData.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "olwEV5bsaEb0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "21676663-3bfa-4542-97eb-8b557c3ce8f8"
      },
      "source": [
        "url_shuffled_data ='/content/drive/MyDrive/4.2/SoftCom/shuffledData.csv'\n",
        "shuffled_data = pd.read_csv(url_shuffled_data, engine='python')\n",
        "shuffled_data.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>tweets</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>9189</td>\n",
              "      <td>@Adnankhun @Nurulnxha Wuah I think Im falling ...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6862</td>\n",
              "      <td>Watchin a Film</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7868</td>\n",
              "      <td>@jonnyshare Haha, I like your style</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5355</td>\n",
              "      <td>@capsontwittter Yeah.  I don't know where. :| )))</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4425</td>\n",
              "      <td>So glad that I have a job that doesn't make me...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Unnamed: 0                                             tweets  sentiment\n",
              "0        9189  @Adnankhun @Nurulnxha Wuah I think Im falling ...          1\n",
              "1        6862                                    Watchin a Film           0\n",
              "2        7868               @jonnyshare Haha, I like your style           0\n",
              "3        5355  @capsontwittter Yeah.  I don't know where. :| )))          0\n",
              "4        4425  So glad that I have a job that doesn't make me...          0"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "DB5oO1O2aVzR",
        "outputId": "32ce8f5a-9244-47be-f1c2-5839f71cfcc7"
      },
      "source": [
        "EPOCH = 10\n",
        "\n",
        "split_val = int(0.2 * shuffled_data.shape[0])\n",
        "\n",
        "dataTest = shuffled_data.iloc[-split_val :]\n",
        "dataVal = shuffled_data.iloc[- 2 * split_val : -split_val]\n",
        "dataTrain = shuffled_data.iloc[: - 2 * split_val]\n",
        "\n",
        "dataTest.head()\n",
        "\n"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweets</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4941</th>\n",
              "      <td>@JanetcBaby You'll always get good services at...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1460</th>\n",
              "      <td>@dave_blogworld sounds like a good plan for al...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1935</th>\n",
              "      <td>ok lets save the date for my passion party... ...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3464</th>\n",
              "      <td>well...im at danielle and bryan's house once m...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3339</th>\n",
              "      <td>Had a Fanastic day!  loved goin to see Casting...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                 tweets  sentiment\n",
              "4941  @JanetcBaby You'll always get good services at...          0\n",
              "1460  @dave_blogworld sounds like a good plan for al...          0\n",
              "1935  ok lets save the date for my passion party... ...          0\n",
              "3464  well...im at danielle and bryan's house once m...          0\n",
              "3339  Had a Fanastic day!  loved goin to see Casting...          0"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "UWsdBIsWbLia",
        "outputId": "aa6ccadc-201e-4ad8-86f6-c349f8171793"
      },
      "source": [
        "dataVal.head()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweets</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5367</th>\n",
              "      <td>@aplusk LOL! Hilarious. Gotta luv the auto-cor...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2456</th>\n",
              "      <td>student assignment reviews - done! phew... now...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2418</th>\n",
              "      <td>@cM5y_fawkes Your house is famous! didn't you ...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9913</th>\n",
              "      <td>@guineapig66 I can relate to the inertia cause...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6164</th>\n",
              "      <td>decided to watch night at the museum, i made a...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                 tweets  sentiment\n",
              "5367  @aplusk LOL! Hilarious. Gotta luv the auto-cor...          0\n",
              "2456  student assignment reviews - done! phew... now...          0\n",
              "2418  @cM5y_fawkes Your house is famous! didn't you ...          0\n",
              "9913  @guineapig66 I can relate to the inertia cause...          1\n",
              "6164  decided to watch night at the museum, i made a...          0"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "vnjAISqobUAt",
        "outputId": "55637d66-3d49-4cd8-c6db-8095526cfc5f"
      },
      "source": [
        "dataTrain.head()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tweets</th>\n",
              "      <th>sentiment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7891</th>\n",
              "      <td>@hadiqazeeshan Yep..he is</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7801</th>\n",
              "      <td>mini buffalo ranch chicken sandwich! *does cor...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>707</th>\n",
              "      <td>@oTotallyUniqueo It's been good thanks  You?</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7087</th>\n",
              "      <td>@macelity looking forward to the class actuall...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7228</th>\n",
              "      <td>I will protect my updates now, so sorry!</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                 tweets  sentiment\n",
              "7891                         @hadiqazeeshan Yep..he is           0\n",
              "7801  mini buffalo ranch chicken sandwich! *does cor...          0\n",
              "707        @oTotallyUniqueo It's been good thanks  You?          0\n",
              "7087  @macelity looking forward to the class actuall...          0\n",
              "7228          I will protect my updates now, so sorry!           0"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "co1RoLcibw9n"
      },
      "source": [
        "trainX = np.array(dataTrain.iloc[:, 0])\n",
        "trainY = np.array(dataTrain.iloc[:, 1])\n",
        "\n",
        "valX = np.array(dataVal.iloc[:, 0])\n",
        "valY = np.array(dataVal.iloc[:, 1])\n",
        "\n",
        "testX = np.array(dataTest.iloc[:, 0])\n",
        "testY = np.array(dataTest.iloc[:, 1])"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JnTPcCsAbzpy"
      },
      "source": [
        "top_k = 50000\n",
        "tokenizer = tf.keras.preprocessing.text.Tokenizer(num_words = top_k,\n",
        "                                                  oov_token = \"<unk>\",\n",
        "                                                  filters = '!\"#$%&()*+.,-/:;=?@[\\]^_`{|}~')\n",
        "tokenizer.fit_on_texts(trainX)\n",
        "\n",
        "tokenizer.word_index['<pad>'] = 0\n",
        "tokenizer.index_word[0] = '<pad>'\n",
        "\n",
        "train_seqs = tokenizer.texts_to_sequences(trainX)\n",
        "val_seqs = tokenizer.texts_to_sequences(valX)\n",
        "test_seqs = tokenizer.texts_to_sequences(testX)\n",
        "\n",
        "train_seqs = tf.keras.preprocessing.sequence.pad_sequences(train_seqs, padding = 'pre')\n",
        "val_seqs = tf.keras.preprocessing.sequence.pad_sequences(val_seqs, padding = 'pre')\n",
        "test_seqs = tf.keras.preprocessing.sequence.pad_sequences(test_seqs, padding = 'pre')"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0D31hH2sciAZ",
        "outputId": "7f67c2e3-6232-4fc4-8398-f233f6f1b097"
      },
      "source": [
        "model = Sequential()\n",
        "model.add(layers.Embedding(len(tokenizer.word_index), 128))\n",
        "model.add(layers.Bidirectional(layers.SimpleRNN(256, return_sequences = True, dropout = 0.2)))\n",
        "model.add(layers.Bidirectional(layers.SimpleRNN(512, return_sequences = True, dropout = 0.2)))\n",
        "model.add(layers.Bidirectional(layers.SimpleRNN(64, return_sequences = True, dropout = 0.2)))\n",
        "model.add(layers.Bidirectional(layers.SimpleRNN(8, dropout = 0.2)))\n",
        "model.add(layers.Dense(1, activation = 'sigmoid'))\n",
        "\n",
        "model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n",
        "\n",
        "model.summary()"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding (Embedding)        (None, None, 128)         2081280   \n",
            "_________________________________________________________________\n",
            "bidirectional (Bidirectional (None, None, 512)         197120    \n",
            "_________________________________________________________________\n",
            "bidirectional_1 (Bidirection (None, None, 1024)        1049600   \n",
            "_________________________________________________________________\n",
            "bidirectional_2 (Bidirection (None, None, 128)         139392    \n",
            "_________________________________________________________________\n",
            "bidirectional_3 (Bidirection (None, 16)                2192      \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 1)                 17        \n",
            "=================================================================\n",
            "Total params: 3,469,601\n",
            "Trainable params: 3,469,601\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FkOEgFIvfN76",
        "outputId": "0f96eee3-a499-4c5f-b0c4-3accd2bc0006"
      },
      "source": [
        "history = model.fit(train_seqs, trainY, epochs = EPOCH, validation_data = (val_seqs, valY), verbose = 1)\n",
        "\n",
        "def plot_graphs(history, string):\n",
        "  plt.plot(history.history[string])\n",
        "  plt.plot(history.history['val_'+string])\n",
        "  plt.xlabel(\"Epochs\")\n",
        "  plt.ylabel(string)\n",
        "  plt.legend([string, 'val_'+string])\n",
        "  plt.show()\n",
        "\n",
        "plot_graphs(history, 'accuracy')\n",
        "plot_graphs(history, 'loss')\n",
        "\n",
        "print('\\nEpoch No.  Train Accuracy  Train Loss     Val Accuracy    Val Loss')\n",
        "for i in range(EPOCH):\n",
        "  print('{:8d} {:10f} \\t {:10f} \\t {:10f} \\t {:10f}'.format(i + 1, history.history['accuracy'][i], history.history['loss'][i], history.history['val_accuracy'][i], history.history['val_loss'][i]))"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "194/194 [==============================] - 217s 1s/step - loss: 0.5851 - accuracy: 0.7425 - val_loss: 1.1250 - val_accuracy: 0.2328\n",
            "Epoch 2/10\n",
            "194/194 [==============================] - 208s 1s/step - loss: 0.5621 - accuracy: 0.7420 - val_loss: 0.8798 - val_accuracy: 0.2304\n",
            "Epoch 3/10\n",
            "194/194 [==============================] - 208s 1s/step - loss: 0.5758 - accuracy: 0.7241 - val_loss: 0.6272 - val_accuracy: 0.7114\n",
            "Epoch 4/10\n",
            "194/194 [==============================] - 209s 1s/step - loss: 0.5369 - accuracy: 0.7750 - val_loss: 0.6328 - val_accuracy: 0.7430\n",
            "Epoch 5/10\n",
            "194/194 [==============================] - 208s 1s/step - loss: 0.5539 - accuracy: 0.7635 - val_loss: 0.5545 - val_accuracy: 0.7672\n",
            "Epoch 6/10\n",
            "194/194 [==============================] - 208s 1s/step - loss: 0.5370 - accuracy: 0.7750 - val_loss: 0.5469 - val_accuracy: 0.7672\n",
            "Epoch 7/10\n",
            "194/194 [==============================] - 208s 1s/step - loss: 0.5325 - accuracy: 0.7750 - val_loss: 0.5473 - val_accuracy: 0.7672\n",
            "Epoch 8/10\n",
            "194/194 [==============================] - 208s 1s/step - loss: 0.5329 - accuracy: 0.7750 - val_loss: 0.5457 - val_accuracy: 0.7672\n",
            "Epoch 9/10\n",
            "194/194 [==============================] - 208s 1s/step - loss: 0.5366 - accuracy: 0.7750 - val_loss: 0.5542 - val_accuracy: 0.7672\n",
            "Epoch 10/10\n",
            "194/194 [==============================] - 208s 1s/step - loss: 0.5306 - accuracy: 0.7751 - val_loss: 0.5486 - val_accuracy: 0.7672\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch No.  Train Accuracy  Train Loss     Val Accuracy    Val Loss\n",
            "       1   0.742488 \t   0.585066 \t   0.232784 \t   1.125048\n",
            "       2   0.742003 \t   0.562069 \t   0.230359 \t   0.879837\n",
            "       3   0.724071 \t   0.575825 \t   0.711445 \t   0.627169\n",
            "       4   0.774960 \t   0.536950 \t   0.742968 \t   0.632839\n",
            "       5   0.763489 \t   0.553930 \t   0.767216 \t   0.554498\n",
            "       6   0.774960 \t   0.536987 \t   0.767216 \t   0.546926\n",
            "       7   0.774960 \t   0.532526 \t   0.767216 \t   0.547345\n",
            "       8   0.774960 \t   0.532872 \t   0.767216 \t   0.545670\n",
            "       9   0.774960 \t   0.536600 \t   0.767216 \t   0.554217\n",
            "      10   0.775121 \t   0.530567 \t   0.767216 \t   0.548633\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "3H-qbb5vpXU2",
        "outputId": "1a41202e-b4b0-46c7-9da9-280bd9745e3a"
      },
      "source": [
        "y_pred = model.predict(train_seqs)\n",
        "\n",
        "y_pred = np.where(y_pred > 0.5, 1, 0)\n",
        "y_pred = np.reshape(y_pred, (y_pred.shape[0]))\n",
        "\n",
        "loss, accuracy = model.evaluate(train_seqs, trainY, verbose = 1)\n",
        "print('Train Loss:', loss)\n",
        "print('Train Accuracy:', accuracy, '(Model Metric)')\n",
        "print('Train Accuracy:', accuracy_score(trainY, y_pred), '(sklearn Metric)')\n",
        "print('Train Precision:', precision_score(trainY, y_pred))\n",
        "print('Train Recall:', recall_score(trainY, y_pred))\n",
        "print('Train F1-score:', f1_score(trainY, y_pred))\n",
        "\n",
        "sns.heatmap(confusion_matrix(trainY, y_pred), annot = True, fmt = 'g')"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "194/194 [==============================] - 44s 222ms/step - loss: 0.5296 - accuracy: 0.7751\n",
            "Train Loss: 0.5295812487602234\n",
            "Train Accuracy: 0.7751211524009705 (Model Metric)\n",
            "Train Accuracy: 0.7751211631663975 (sklearn Metric)\n",
            "Train Precision: 1.0\n",
            "Train Recall: 0.0007178750897343862\n",
            "Train F1-score: 0.0014347202295552368\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fdc037e9dd0>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "3VIDT8KDpbFl",
        "outputId": "37135d14-b9a7-4dd9-a346-622380b6d02d"
      },
      "source": [
        "y_pred = model.predict(val_seqs)\n",
        "\n",
        "y_pred = np.where(y_pred > 0.5, 1, 0)\n",
        "y_pred = np.reshape(y_pred, (y_pred.shape[0]))\n",
        "\n",
        "loss, accuracy = model.evaluate(val_seqs, valY, verbose = 1)\n",
        "print('Validation Loss:', loss)\n",
        "print('Validation Accuracy:', accuracy, '(Model Metric)')\n",
        "print('Validation Accuracy:', accuracy_score(valY, y_pred), '(sklearn Metric)')\n",
        "print('Validation Precision:', precision_score(valY, y_pred))\n",
        "print('Validation Recall:', recall_score(valY, y_pred))\n",
        "print('Validation F1-score:', f1_score(valY, y_pred))\n",
        "\n",
        "sns.heatmap(confusion_matrix(valY, y_pred), annot = True, fmt = 'g')"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "65/65 [==============================] - 13s 199ms/step - loss: 0.5486 - accuracy: 0.7672\n",
            "Validation Loss: 0.5486325025558472\n",
            "Validation Accuracy: 0.7672162652015686 (Model Metric)\n",
            "Validation Accuracy: 0.7672162948593598 (sklearn Metric)\n",
            "Validation Precision: 0.0\n",
            "Validation Recall: 0.0\n",
            "Validation F1-score: 0.0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fdc034a63d0>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "Ank5fVIipdM5",
        "outputId": "2001af65-8d4a-4451-8d20-8f7995d8ff34"
      },
      "source": [
        "y_pred = model.predict(test_seqs)\n",
        "\n",
        "y_pred = np.where(y_pred > 0.5, 1, 0)\n",
        "y_pred = np.reshape(y_pred, (y_pred.shape[0]))\n",
        "\n",
        "loss, accuracy = model.evaluate(test_seqs, testY, verbose = 1)\n",
        "print('Test Loss:', loss)\n",
        "print('Test Accuracy:', accuracy, '(Model Metric)')\n",
        "print('Test Accuracy:', accuracy_score(testY, y_pred), '(sklearn Metric)')\n",
        "print('Test Precision:', precision_score(testY, y_pred))\n",
        "print('Test Recall:', recall_score(testY, y_pred))\n",
        "print('Test F1-score:', f1_score(testY, y_pred))\n",
        "\n",
        "sns.heatmap(confusion_matrix(testY, y_pred), annot = True, fmt = 'g')"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "65/65 [==============================] - 11s 161ms/step - loss: 0.5351 - accuracy: 0.7861\n",
            "Test Loss: 0.5351038575172424\n",
            "Test Accuracy: 0.7861299514770508 (Model Metric)\n",
            "Test Accuracy: 0.7861299709020368 (sklearn Metric)\n",
            "Test Precision: 0.0\n",
            "Test Recall: 0.0\n",
            "Test F1-score: 0.0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fdc038854d0>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
